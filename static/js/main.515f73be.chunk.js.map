{"version":3,"sources":["types/Todo.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FilterBy","TodoList","todos","selected","selectedTodo","className","map","todo","id","completed","classNames","title","type","onClick","TodoFilter","searchQuery","setSearchQuery","completedFilter","setCompletedFilter","value","onChange","event","target","NONE","ACTIVE","COMPLETED","placeholder","length","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","onClose","useState","user","setUser","useEffect","userId","userFromServer","href","email","name","App","setTodos","selectedTodoId","setSelectedTodoId","isLoading","setIsLoading","todosFromServer","finally","onCloseSelected","useCallback","useMemo","find","filteredToDo","filter","queryFilter","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.515f73be.chunk.js","sourcesContent":["export interface Todo {\n  id: number;\n  title: string;\n  completed: boolean;\n  userId: number;\n}\n\nexport enum FilterBy {\n  NONE = 'all',\n  COMPLETED = 'completed',\n  ACTIVE = 'active',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[],\n  selected: number,\n  selectedTodo: (todo:React.SetStateAction<number>) => void,\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selected,\n  selectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr data-cy=\"todo\" className=\"\" key={todo.id}>\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n            {todo.completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p className={classNames(\n              {\n                'has-text-success': todo.completed,\n                'has-text-danger': !todo.completed,\n              },\n            )}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => (\n                selectedTodo(todo.id)\n              )}\n            >\n              <span className=\"icon\">\n                <i className={classNames(\n                  {\n                    'far fa-eye-slash': selected,\n                    'far fa-eye': !selected,\n                  },\n                )}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import { FC } from 'react';\nimport { FilterBy } from '../../types/Todo';\n\ninterface Props {\n  searchQuery: string,\n  setSearchQuery: (title:string) => void,\n  completedFilter: string,\n  setCompletedFilter: (filter: FilterBy) => void,\n}\n\nexport const TodoFilter: FC<Props> = ({\n  searchQuery,\n  setSearchQuery,\n  completedFilter,\n  setCompletedFilter,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={completedFilter}\n          onChange={event => setCompletedFilter(event.target.value as FilterBy)}\n        >\n          <option value={FilterBy.NONE}>All</option>\n          <option value={FilterBy.ACTIVE}>Active</option>\n          <option value={FilterBy.COMPLETED}>Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={searchQuery}\n        onChange={(event) => (\n          setSearchQuery(event.target.value)\n        )}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {searchQuery.length > 0 && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => setSearchQuery('')}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ninterface Props {\n  todo: Todo,\n  onClose: () => void,\n}\n\nexport const TodoModal: React.FC<Props> = ({ todo, onClose }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(todo.userId)\n      .then(userFromServer => setUser(userFromServer));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user\n        ? (\n          <Loader />\n        ) : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${todo.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={onClose}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {todo.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {todo.completed\n                  ? (<strong className=\"has-text-success\">Done</strong>)\n                  : (<strong className=\"has-text-danger\">Planned</strong>)}\n                {' by '}\n\n                <a href={`mailto:${user.email}`}>\n                  {user.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo, FilterBy } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [completedFilter, setCompletedFilter] = useState(FilterBy.NONE);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then(todosFromServer => setTodos(todosFromServer))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const onCloseSelected = useCallback(() => {\n    setSelectedTodoId(0);\n  }, []);\n\n  const selectedTodo = useMemo(() => (\n    todos.find((todo) => todo.id === selectedTodoId)\n  ), [selectedTodoId]);\n\n  const filteredToDo = useMemo(() => (\n    todos.filter(todo => {\n      const queryFilter = todo.title.toLowerCase().includes(searchQuery.toLowerCase());\n\n      switch (completedFilter) {\n        case FilterBy.ACTIVE:\n          return queryFilter && !todo.completed;\n\n        case FilterBy.COMPLETED:\n          return queryFilter && todo.completed;\n\n        default:\n          return queryFilter;\n      }\n    })\n  ), [searchQuery, todos, completedFilter]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                searchQuery={searchQuery}\n                setSearchQuery={setSearchQuery}\n                completedFilter={completedFilter}\n                setCompletedFilter={setCompletedFilter}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? (<Loader />)\n                : (\n                  <TodoList\n                    todos={filteredToDo}\n                    selected={selectedTodoId}\n                    selectedTodo={(todo: React.SetStateAction<number>) => {\n                      setSelectedTodoId(todo);\n                    }}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n      { selectedTodo\n        && <TodoModal todo={(selectedTodo)} onClose={onCloseSelected} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}